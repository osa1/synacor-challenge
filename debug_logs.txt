Comment copied from vm.rs:

// # V1
//
// First version was just capable of running the program and nothing else.
// I realized my first mistake in a few minutes: There was no way of saving the
// game so if I've been eaten by a grue or something I'd have to start from
// scratch.
//
// Second mistake was running an optimized build (or some kind of build with
// less debugging info than I needed). When I first made it to the "office", I
// wanted to fire up GDB and look at the VM's registers. Note that at this point
// I couldn't exit because that that would mean losing all the progress. GDB
// couldn't even list locals in my stack frames, so I had no choice but to start
// from scratch with a modified VM.
//
// (maybe talk a little bit aobut how I solved the equation on the wall)
//
// # V2
//
// First, the VM now saves all the input to a file. Second, it takes a command
// line argument for a file path and reads that file into the input buffer so
// that when the program runs, characters are read from that pre-loaded buffer.
// Assuming no random events occur in the game, this should be enough for
// save/restore. It's actually much more flexible than traditional save/load
// systems as you can modify the input file or trim it to load to different
// points.
//
// # V3
//
// Still can't use the teleporter. I added a spacial case for when input is
// "/record". Upon seeing that input, VM starts to record the execution to
// stderr. I see this line in the execution record:
//
//   Executing instruction: Jf [Reg(7), Num(5605)]
//   Regs: [2708, 5445, 3, 10, 101, 0, 0, 0]
//   Stack: [6080, 16, 6124, 1, 2952, 25978, 3568, 3599, 2708, 5445, 3]
//
// The "strange book" was talking about register 8. This should be it. But it's
// not clear 1) what value should be written in register 8 2) how to by-pass the
// validation...
//
// If I set it something non-zero, I get this:
//
//   A strange, electronic voice is projected into your mind:
//
//     "Unusual setting detected!  Starting confirmation process!  Estimated
//     time to completion: 1 billion years."
//
// Just for the amusements, I left my laptop running this process. After a while
// it printed this:
//
//   A strange, electronic voice is projected into your mind:
//
//     "Miscalibration detected!  Aborting teleportation!"
//
//   Nothing else seems to happen.
//
// So maybe, if I can find the correct number, I don't need to by-pass the
// verification process. Brute-force is definitely not possible though, this
// took about 10 minutes. 2^15 numbers, each one taking 10 mintes to take, would
// take 227 days to test.
//
// ...
//
// Started implementing a debugger. Not sure how I'll use it but I'm hoping to
// inspect which instructions read/ write to R8.
//
// I just realized things would be so much easier if we knew that the program
// isn't generating any instructions dynamically...
//
// ...
//
// Some investigation on the execution using new `break_reg_read` and
// `break_reg_write` breakpoints revealed that when teleporter is used, R8 is
// compared with zero:
//
//   > Jf [Reg(7), Num(5605)]
//
// (reg indices start from 0, so Reg(7) is actually register 8)
//
// Next obvious step is to disassemble instructions after this instruction and
// to try to understand what's happening. For that I'll first need to implement
// a disassembler.



After `use teleporter`, first time R8 is read is by this:

REGS:       [2708] [5445] [3] [10] [101] [0] [0] [0]
STACK:      [6080, 16, 6124, 1, 2952, 25978, 3568, 3599, 2708, 5445, 3]
IP:         5451
INSTR SIZE: 3
NEXT IP:    5454

> disas 5451 100
[5451] Jf [Reg(7), Num(5605)]
[5454] Push [Reg(0)]
[5456] Push [Reg(1)]
[5458] Push [Reg(2)]
[5460] Set [Reg(0), Num(28844)]
[5463] Set [Reg(1), Num(1531)]
[5466] Add [Reg(2), Num(10236), Num(7398)]
<<<<<< REGS:       [28844] [1531] [17634] [10] [101] [0] [0] [1]
[5470] Call [Num(1458)] -- print_string()
[5472] Pop [Reg(2)]
[5474] Pop [Reg(1)]
[5476] Pop [Reg(0)]
[5478] Noop []
[5479] Noop []
[5480] Noop []
[5481] Noop []
[5482] Noop []
...

Interestingly, even though stack has stuff in it, this doesn't look like a
function -- it restores R1, R2, and R3 but doesn't return.

5605 should be doing the usual stuff. So we should look at what 1458 is doing.

On entry R1 is 28844, R2 is 1531, R3 is 17634.

> disas 1458 100
fn print_string(r0, r1, r2) {
    [1458] Push [Reg(0)]
    [1460] Push [Reg(3)]
    [1462] Push [Reg(4)]
    [1464] Push [Reg(5)]
    [1466] Push [Reg(6)]
    [1468] Set [Reg(6), Reg(0)]
    [1471] Set [Reg(5), Reg(1)]
    <<<<<< REGS:       [28844] [1531] [17634] [10] [101] [1531] [28844] [1]
    [1474] Rmem [Reg(4), Reg(0)]
    <<<<<< REGS:       [28844] [1531] [17634] [10] [169] [1531] [28844] [1]
    [1477] Set [Reg(1), Num(0)]
    [1480] Add [Reg(3), Num(1), Reg(1)]
    <<<<<< REGS:       [28844] [0] [17634] [1] [169] [1531] [28844] [1]
    [1484] Gt [Reg(0), Reg(3), Reg(4)] -- if (reg3 > reg4) { return; }
    [1488] Jt [Reg(0), Num(1507)] ------------- jumps to 1507 (returns)
    [1491] Add [Reg(3), Reg(3), Reg(6)] -- reg3 += reg6;
    [1495] Rmem [Reg(0), Reg(3)] -- reg0 = *reg3;
    [1498] Call [Reg(5)] ---------------------- jumps to 1531
    [1500] Add [Reg(1), Reg(1), Num(1)] -- reg1 += 1;
    [1504] Jt [Reg(1), Num(1480)] ------------- jumps to 1480 (loop)
    [1507] Pop [Reg(6)]
    [1509] Pop [Reg(5)]
    [1511] Pop [Reg(4)]
    [1513] Pop [Reg(3)]
    [1515] Pop [Reg(0)]
    [1517] Ret [] ----------------------------- end of basic block 1458
}

This looks like something that prints a string. Indeed, I placed a breakpoint at
1517, and when I run it just printed stuff.

At this point in prints this btw:

    A strange, electronic voice is projected into your mind:

      "Unusual setting detected!  Starting confirmation process!  Estimated time to completion: 1 billion years."

Good! Now we return to 5472. Which just restores some registers but doesn't
return! It turns out it executes instructions after NOOPs...

[5483] Set [Reg(0), Num(4)]
[5486] Set [Reg(1), Num(1)]
<<<<<< REGS:       [4] [1] [3] [10] [101] [0] [0] [1]
<<<<<< STACK:      [6080, 16, 6124, 1, 2952, 25978, 3568, 3599, 2708, 5445, 3]
[5489] Call [Num(6027)]
...

> disas 6027 100
                                         -- fn(reg0 = 4, reg1 = 1, reg7 = our value) {
[6027] Jt [Reg(0), Num(6035)]            --   if reg0 == 0 {
[6030] Add [Reg(0), Reg(1), Num(1)]      --     reg0 = reg1 + 1;
[6034] Ret []                            --     return; }
[6035] Jt [Reg(1), Num(6048)]            --   if reg1 == 0 {
[6038] Add [Reg(0), Reg(0), Num(32767)]  --     reg0 -= 1;
[6042] Set [Reg(1), Reg(7)]              --     reg1 = reg7;
[6045] Call [Num(6027)] ------ loop      --     fn();
[6047] Ret []                            --     return; }
[6048] Push [Reg(0)]                     --   push(reg0);
[6050] Add [Reg(1), Reg(1), Num(32767)]  --   reg1 -= 1;
[6054] Call [Num(6027)] ------ loop      --   fn();
[6056] Set [Reg(1), Reg(0)]              --   reg1 = reg0;
[6059] Pop [Reg(0)]                      --   reg0 = pop();
[6061] Add [Reg(0), Reg(0), Num(32767)]  --   reg0 -= 1;
[6065] Call [Num(6027)] ------ loop      --   fn();
[6067] Ret [] --end of basic block 6027  --   return;
                                         -- }

Used registers: 0, 1, 7.
Stack is also used.

I implemented this in Rust (in fn.rs). I still don't have any ideas of what this
is doing though...

!!!

At this point I started to think about some function with crazy asymptotic
complexities. I remember Ackermann and look at the Wikipedia for it. I realized
that when R8=1, this function is the Ackermann function!

Still, I don't know how to use this so I keep debugging. This function returns
to here:

[5491] Eq [Reg(1), Reg(0), Num(6)] -- reg0 has the return value
[5495] Jf [Reg(1), Num(5579)]      -- if (reg0 != 6) { jmp 5579; }
[5498 - 5520] print_string(29014, 1531, Num(5928) + Num(17208));
[5522] Set [Reg(0), Reg(7)]  -- override reg0... so it turns out reg0 (return
                             -- value of this Ackermann-like function) is only
                             -- used to compare it with 6, and that branch
                             -- should be taken otherwise it'd be unused)
[5525] Set [Reg(1), Num(25866)]
[5528] Set [Reg(2), Num(32767)]
[5531] Push [Reg(3)]
[5533] Set [Reg(3), Num(29241)]

  -- this looks important. r7 (which was our special value) is moved to r0 right
  -- before the call. state is this:
  --   REGS:       [1 (actually r7)] [25866] [32767] [29241] [101] [0] [0] [1]
  --   STACK:      [6080, 16, 6124, 1, 2952, 25978, 3568, 3599, 2708, 5445, 3, 10]
  --   IP:         5536
[5536] Call [Num(1841)]

[5538] Pop [Reg(3)]
  -- This next line prints a code! However in my case it printed an invalid
  -- one. Probably because the code printed here is generated in call at [5536],
  -- and since r7 (in r1) was wrong, it generated wrong code. Indeed, code needs
  -- to be generated otherwise I could just look at strings in the binary...
  --
  -- So I guess I need to understand function at 1841.

Ok.. I 1841 is messy, but I don't think we need to understand it. It's somehow
used in the code generation, and as "seed" it uses our R8 before using the
teleportation. Also, the Ackermann-like function needs to return 6. So
basically, we need to find R8 that makes this Ackermann-like function to return
6. Then that value will be used as "seed" in 1841 and it'll generate our correct
code.

I implemented a program that calculates this, see `fn.rs`.

[5540 - 5562] print_string(29245, 1531, Num(3250) + Num(2099));
[5564] Wmem [Num(2732), Num(2498)]
[5567] Wmem [Num(2733), Num(0)]
[5570] Add [Reg(1), Num(2708), Num(2)]
[5574] Wmem [Reg(1), Num(32767)]
[5577] Jmp [Num(5714)]
[5579 - 5601] print_string(29400, 1531, Num(7707) + Num(82)); <---- we should jump to here
[5603] Jmp [Num(5714)]
[5605 - 5627] print_string(29545, 1531, Num(11291) + Num(10202));
[5629] Set [Reg(0), Num(0)]
[5632] Add [Reg(2), Num(1), Num(27101)]
[5636] Rmem [Reg(1), Reg(2)]
[5639] Add [Reg(0), Reg(0), Reg(1)]
[5643] Mult [Reg(0), Reg(0), Num(31660)]
[5647] Call [Num(2125)]
[5649] Rmem [Reg(1), Num(27101)]
[5652] Add [Reg(1), Reg(1), Num(27101)]
[5656] Add [Reg(2), Reg(2), Num(1)]
[5660] Gt [Reg(1), Reg(2), Reg(1)]
[5664] Jf [Reg(1), Num(5636)]
[5667] Set [Reg(1), Num(25866)]
[5670] Set [Reg(2), Num(32767)]
[5673] Push [Reg(3)]
[5675] Set [Reg(3), Num(29663)]
[5678] Call [Num(1841)]
[5680] Pop [Reg(3)]
[5682 - 5704] print_string(29667, 1531, Num(12624) + Num(1175))
[5706] Wmem [Num(2732), Num(2488)]
[5709] Wmem [Num(2733), Num(0)]
[5712] Jmp [Num(5714)]
[5714] Pop [Reg(2)]
[5716] Pop [Reg(1)]
[5718] Pop [Reg(0)]
[5720] Ret []

> disas 1841 100
[1841] Push [Reg(3)]
[1843] Push [Reg(4)]
[1845] Push [Reg(5)]
[1847] Push [Reg(6)]
[1849] Set [Reg(6), Num(1)]                -- reg6 = 1
[1852] Add [Reg(4), Reg(3), Reg(6)]        -- reg4 = reg3 + reg6 -----------\
[1856] Rmem [Reg(4), Reg(4)]               -- reg4 = *reg4                  |
[1859] Add [Reg(5), Num(6125), Reg(6)]     -- reg5 = reg6 + 6125            |
[1863] Wmem [Reg(5), Reg(4)]               -- *reg5 = reg4                  |
[1866] Add [Reg(6), Reg(6), Num(1)]        -- r6 += 1                       |
[1870] Rmem [Reg(5), Num(6125)]            -- r5 = *6125                    |
[1873] Gt [Reg(4), Reg(6), Reg(5)]         -- reg4 = reg6 > reg5            |
[1877] Jf [Reg(4), Num(1852)]              -- if reg4 == 0 { goto 1852; } --/
[1880] Set [Reg(3), Num(0)]
[1883] Set [Reg(4), Num(0)]
[1886] Rmem [Reg(5), Num(6125)]
[1889] Mod [Reg(5), Reg(4), Reg(5)]
[1893] Add [Reg(5), Reg(5), Num(6125)]
[1897] Add [Reg(5), Reg(5), Num(1)]
[1901] Rmem [Reg(6), Reg(5)]
[1904] Mult [Reg(6), Reg(6), Num(5249)]
[1908] Add [Reg(6), Reg(6), Num(12345)]
[1912] Wmem [Reg(5), Reg(6)]
[1915] Push [Reg(0)]
[1917] Push [Reg(1)]
[1919] Set [Reg(1), Reg(6)]
[1922] Call [Num(2125)]
[1924] Set [Reg(6), Reg(0)]
[1927] Pop [Reg(1)]
[1929] Pop [Reg(0)]
[1931] Rmem [Reg(5), Reg(1)]
[1934] Mod [Reg(6), Reg(6), Reg(5)]
[1938] Add [Reg(6), Reg(6), Num(1)]
[1942] Gt [Reg(5), Reg(6), Reg(2)]
[1946] Jt [Reg(5), Num(1952)]
[1949] Set [Reg(3), Num(1)]
[1952] Add [Reg(6), Reg(6), Reg(1)]
[1956] Rmem [Reg(6), Reg(6)]
[1959] Add [Reg(4), Reg(4), Num(1)]
[1963] Add [Reg(5), Reg(4), Num(6129)]
[1967] Wmem [Reg(5), Reg(6)]
[1970] Rmem [Reg(5), Num(6129)]
[1973] Eq [Reg(5), Reg(4), Reg(5)]
[1977] Jf [Reg(5), Num(1886)]
[1980] Jf [Reg(3), Num(1880)]
[1983] Push [Reg(0)]
[1985] Set [Reg(0), Num(6129)]
[1988] Call [Num(1518)]
[1990] Pop [Reg(0)]
[1992] Pop [Reg(6)]
[1994] Pop [Reg(5)]
[1996] Pop [Reg(4)]
[1998] Pop [Reg(3)]
[2000] Ret []

---

OK... So I need to write about the Ackermann thing but in the meantime I solved
the last puzzle, completing the challenge.

I realized it's a maze of 4x4. Each tile has either an operator (+, - or *) or a
number. We take an orb at south-west corner, and vault door is at north-east
corner. On the door it says "30". It's not hard to guess what's the puzzle here.
I implemented a program that searches for a solution, using breadth-first search
on the search state.

Once we get in the vault we find a mirror. When we look at it we see a code is
written on our forehead O_O. Now imagine looking at a mirror and reading a text.
How would you go from what you see to the original text? This is the last puzzle
of the challenge.

---

Overall I really enjoyed the puzzle. I'd like to participate in more challenges
like this, so if you know any similar challenges please let me know in the
comments section below.
